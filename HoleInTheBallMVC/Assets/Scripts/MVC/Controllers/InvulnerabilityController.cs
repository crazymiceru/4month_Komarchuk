using UnityEngine;

namespace Hole
{
    internal sealed class InvulnerabilityController : IController, IExecute, IInitialization
    {
        private UnitM _unit;
        private UnitView _unitView;
        private UnitData _unitData;
        private GameObject _goInvulnerability;

        
        internal InvulnerabilityController(UnitM unit, UnitView unitView, UnitData unitData)
        {
            _unit = unit;
            _unitView = unitView;
            _unitData = unitData;
            _unit.addTimeInvulnerability = _unitData.timeInvulnerability;
            _goInvulnerability = _unitView.transform.Find("Invulnerability").gameObject;
            _goInvulnerability.SetActive(false);
            unit.evtKill += Kill;
        }

        void Kill()
        {
            ListControllers.inst.Delete(this);
        }

        public void Execute(float deltaTime)
        {
            if (_unit.isInvulnerability)
            {
                if (!_goInvulnerability.activeSelf)
                {
                    _goInvulnerability.SetActive(true);
                    Debug.Log($"InvulnerabilityON");
                }
                if (_unit.startTimeInvulnerability < Time.time)
                {
                    _unit.isInvulnerability = false;
                    _goInvulnerability.SetActive(false);
                    Debug.Log($"InvulnerabilityOFF");
                }
            }
        }

        public void Initialization()
        {
            _goInvulnerability.SetActive(false);
        }
    }
}